有n个数，两两组成二元组，差最小的有多少对？
思路1：
1.先排序
         特殊情况：如果排完序之后发现数组中所有数都相同，直接输出结果
             结果为：差最大个数 = 差最小个数 = （n * (n-1))/2;(两两组合)
    2.统计数组中每种数字的个数（这里用的map）
    3.计算差最小个数
        3.1.如果数组中没有重复数字，说明最小差不为0，最小差肯定是数组中相邻两个数的差
            因此，遍历一边数组，计算并统计最小差。
        3.2.如果数组中有重复数字，说明最小差是0，此时，遍历一边map，数字个数不为0的
            数字会产生最小差0，利用公式计算即可
    4.计算差最大个数
        只有一种情况，最大值与最小值的两两组合，即最大值个数 * 最小值个数
代码如下：
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main(){
    int n;
    while (cin >> n){
        if (n < 2){
            cout << 0 << ' ' << 0 << endl;
            continue;
        }
        if (n == 2){
            cout << 1 << ' ' << 1 << endl;
            continue;
        }
        //3个数以上的情况
        vector<int> data;
        while (n--){
            int temp;
            cin >> temp;
            data.push_back(temp);
        }
        int length = data.size();
        sort(data.begin(), data.end());
        //先求最小的，肯定是相邻的相减得到
        int min_val = abs(data[1] - data[0]);
        for (int i = 2; i < length; ++i){
            int cur = (data[i] - data[i - 1]);
            if (cur < min_val)
                min_val = cur;
        }
        //统计最小的数目
        int min_count = 0;
        if (min_val == 0){//有相同大小的数子，统计个数，用组合求对数
            for (int i = 1; i < length; ++i)
            {
                int j = i - 1;
                while (j >= 0 && data[i] == data[j]){
                    ++min_count;
                    --j;
                }
            }
        }
        else
        {
            for (int i = 1; i < length; ++i){
                int cur = (data[i] - data[i - 1]);
                if (cur == min_val)
                    ++min_count;
            }
        }
        //求差最大的对数：最小的个数*最大的个数（如果最大的不等于最小的）
        int max_val = data[length - 1] - data[0];
        int max_count = 0;
        int a, b;
        a = b = 0;
        for (int i = 0; i < length; ++i){
            if (data[i] == data[0])
                ++a;
        }
        for (int i = length - 1; i >= 0; --i){
            if (data[i] == data[length - 1])
                ++b;
        }
        if (max_val == 0)//当最大等于最小，即数据全部一样eg. 1 1 1 1时，显然 4*4是不对的
            max_count = length*(length - 1) / 2;
        else
            max_count = a*b;
 
        cout << min_count << ' ' << max_count << endl;
    }
    return 0;
}
思路2：
先排序
求差为最小值的对数 
先求最小值minVal
若存在重复的元素：差为0，双重循环求差为0的对数，即得到minCount
若不存在重复的元素：最小值只出现在相邻元素间，循环一次即可得到minCount
求差为最大值的对数 
若全部元素都相等，利用排列组合的知识：maxCount=x*(x-1)/2
若不是全部元素都相等：maxCount=最小元素的个数*最大元素的个数
注意：千万不要忽略重复元素的情况！比如：3 3 3 3，最大值对是6对！而不是3对，更不是12对！

所用数据结构： vector
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
int main()
{
    int num,i,j;
    while(cin>>num)//读入元素的总个数
    {
        if(num<2)
        {
            cout<<0<<" "<<0<<endl;
            continue;
        }
        vector<int> arr;//arr不要声明为全局变量,不然全部测试数据都被存入了arr
        int length=num;
        int temp;
        while(num--)//不能写成while(cin>>temp)，不然，全部测试数据都被一次性存入了arr
        {
            cin>>temp;
            arr.push_back(temp);
        }
        sort(arr.begin(),arr.end());//C++排序函数：对[begin,end)内所有元素排序
 
        //求最小值minVal
        int minVal=arr[1]-arr[0];
        for(i=1;i<length-1;++i)
        {
            int cur=arr[i+1]-arr[i];
            if(cur<minVal)
                minVal=cur;
        }
        //求最小值的个数minCount
        int minCount=0;
        if(minVal==0)//arr中有相等元素时
        {
            for(i=0;i<length-1;++i)
            {
                for(j=i+1;j<length;++j)
                {
                    if(arr[i]==arr[j])
                        ++minCount;
                }
            }
        }
        else//arr中无元素相等时
        {
            for(i=0;i<length-1;++i)
            {
                int cur=arr[i+1]-arr[i];
                if(cur==minVal)
                {
                    ++minCount;
                }
            }
        }
 
        //求最大值maxVal
        int maxVal=arr[length-1]-arr[0];
        //求最大值的个数maxCount
        int maxCount=0;
        if(maxVal==0)//全部元素都相等,利用组合原理
        {
            maxCount=length*(length-1)/2;
        }
        else//有不同的元素,最大值的个数=最小的个数*最大的个数
        {
            int smallCount=0,bigCount=0;
            for(i=0;i<length;++i)
            {
                if(arr[i]==arr[0])
                    ++smallCount;
                else if(arr[i]==arr[length-1])
                    ++bigCount;
            }
            maxCount=smallCount*bigCount;
        }
        cout<<minCount<<" "<<maxCount<<endl;
    }
    return 0;
}
