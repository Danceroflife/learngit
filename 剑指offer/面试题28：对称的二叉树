//对称二叉树：前序遍历序列和对称前序遍历(中，右,左)序列一样 
#include<iostream>
using namespace std;

struct BinaryTreeNode
{
	int       m_nValue;
	BinaryTreeNode*  m_pLeft;
	BinaryTreeNode* m_pRight;
};

bool isSymmetrical(BinaryTreeNode* pRoot1,BinaryTreeNode* pRoot2)
{
	if(pRoot1==nullptr&&pRoot2==nullptr)
		return true;

	if(pRoot1==nullptr||pRoot2==nullptr)
		return false;

	if(pRoot1->m_nValue!=pRoot2->m_nValue)
		return false;

	//一种先遍历右节点，再遍历左节点的算法 若两者遍历结果一致，则是对称二叉树
	return isSymmetrical(pRoot1->m_pLeft,pRoot2->m_pRight)&&isSymmetrical(pRoot2->m_pRight,pRoot1->m_pLeft);
}

bool isSymmetrical(BinaryTreeNode* pRoot)
{
	return isSymmetrical(pRoot,pRoot);
}
