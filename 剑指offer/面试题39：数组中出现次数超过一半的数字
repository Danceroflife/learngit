//面试题39：数组中出现次数超过一半的数字 
//例如:输入长度为9的数组{1,2,3,2,2,2,5,4,2},由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2
bool g_bInputInvalid=false;

//数组在传参时，退化为指针，需考虑指针是否为空即数组是否有效
bool CheckInvaildArray(int *numbers,int length)
{
	g_bInputInvalid=true;
	if(numbers==NULL||length<=0)
		g_bInputInvalid=false;

	return g_bInputInvalid;
}

//判断数组中出现最高频率是否达到标准
bool CheckMoreThanHalf(int *numbers,int length,int number)
{
	int times=0;
	for(int i=0;i<length;++i)
	{
		if(numbers[i]==number)
			times++;
	}
	bool isMoreThanHalf=true;
	if(times*2<=length)
	{
		g_bInputInvalid=true;
		isMoreThanHalf=false;
	}
	return isMoreThanHalf;
}

//划分基准的函数，找到任意一个元素在数组中的位置，则通过递归缩范围查找
int Partition(int *numbers,int length,int start,int end)
{
	int i=0;
	int j=length-1;
	int tmp=numbers[0];
	while(i<j&&numbers[j]>=tmp)
	{
		--j;
		
	}
	if(i<j)
		numbers[i]=numbers[j];
	while(i<j&&numbers[i]<=tmp)
	{
		++i;
	}
		if(i<j)
		numbers[i]=numbers[j];
		numbers[i]=tmp;
	
	return i;
}
//解法一：查找中位数，若出现一半以上，则排序后的中位数肯定是要寻找的数字
int MoreThanHalfNumber(int *numbers,int length)
{
	if(CheckInvaildArray(numbers,length))
		return 0;

	int middle=length>>1;
	int start=0;
	int end=length-1;
	int index=Partition(numbers,length,start,end);
	while(index!=middle)
	{
		if(index>middle)
		{
			end=index-1;
			index=Partition(numbers,length,start,end);
		}
		else
		{
			start=index+1;
			index=Partition(numbers,length,start,end);
		}
	}
	int result=numbers[middle];
	if(!CheckMoreThanHalf(numbers,length,result))
		result=0;
	return result;
}

//解法二：遍历数组时，保存两个值，一个是数组中的一个数字，另一个是次数
//遍历到下一个数字时，若和之前保存的数字一样，则次数加一，否则，次数减一，当次数减为0，保存下一个数字，并将次数设为1
//由于要找的次数比其他的次数之和还多，则要找的数字是最后一次把次数设为1时对应的数字
int MoreThanHalfNumber1(int *numbers,int length)
{
	if(CheckInvaildArray(numbers,length))
		return 0;

	int result=numbers[0];
	int times=1;
	for(int i=1;i<length;++i)
	{
		if(times==0)
		{
			result=numbers[i];
			times=1;
		}
		else if(numbers[i]==result)
			times++;
	}

	if(!CheckMoreThanHalf(numbers,length,result))
		result=0;
	return result;
}
int main()
{
	int numbers[9]={1,2,3,2,2,2,5,4,2};
	printf("%d\n",MoreThanHalfNumber1(numbers,9));
	return 0;
}
