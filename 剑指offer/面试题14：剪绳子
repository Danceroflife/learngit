面试题14：剪绳子
//一根长度为n的绳子，剪成m段(m,n都大于1，且都为整数),每段长度记为k[0],k[1]...,k[m].求k[0]*k[1]...*k[m]可能的最大乘积
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
//动态规划
int maxProductAfterCutting_Solution(int length)
{
	//绳子在3米以内，直接返回对应的值，不能用动态规划的公式做
	if(length<2)
		return 0;
	if(length==2)
		return 1;
	if(length==3)
		return 2;
	//创建数组存储子问题最优解
	int* products=new int[length+1];//?
	//绳子大于3米，可以用动态规划的公式做，f(n)=f(i)*f(n-i)
	//对于绳子长度为1，2,3米的,绳子的最大乘积就是长度本身
	products[0]=0;
	products[1]=1;
	products[2]=2;
	products[3]=3;

	int max=0;
	//从4米开始计算，直到计算到总长
	for(int i=4;i<=length;++i)
	{
		max=0;
		//对于长度为i的绳子，计算所有可能的切分，找到最大值
		for(int j=1;j<=i/2;++j)
		{
			//切分组合
			int product=products[j]*products[i-j];
			if(max<product)
				max=product;

			products[i]=max;
		}
	}
	max=products[length];
	delete[] products;

	return max;
}

//贪心算法
int maxProductAfterCutting_Solution2(int length)
{
	if(length<2)
		return 0;
	if(length==2)
		return 1;
	if(length==3)
		return 2;

	//尽可能的减去长度为3的绳子段
	int timesOf3=length/3;
	//当绳子最后剩下的长度为4的时候，不能再减去长度为3的绳子段
	//此时更好的方法是把绳子剪成长度为2的两段，因为2*2>3*1
	if(length-timesOf3*3==1)
		timesOf3-=1;
	
	//最后小于等于4米的，尽量多的产生2米的分割
	int timesOf2=(length-timesOf3*3)/2;

	//3的多少个三次幂乘以2的多少个2次幂
	return (int)(pow(3.0,timesOf3))*(int)(pow(2.0,timesOf2));
}
