//面试题27：二叉树的镜像
// 题目：完成一个函数，输入一颗二叉树，该函数输出他的镜像
#include<iostream>
#include<stack>
using namespace std;

struct BinaryTreeNode
{
	int       m_nValue;
	BinaryTreeNode*  m_pLeft;
	BinaryTreeNode* m_pRight;
};

//递归实现
void MirrorRecursively(BinaryTreeNode *pNode)
{
	if(pNode==nullptr)
		return;
	if(pNode->m_pLeft==nullptr&&pNode->m_pRight==nullptr)
		return;

	//交换两个子节点
	BinaryTreeNode *pTemp=pNode->m_pLeft;
	pNode->m_pLeft=pNode->m_pRight;
	pNode->m_pRight=pTemp;

	//对左子树递归调用
	if(pNode->m_pLeft)
		MirrorRecursively(pNode->m_pLeft);

	//对右子树递归调用
	if(pNode->m_pRight)
		MirrorRecursively(pNode->m_pRight);
}

//循环实现
void MirrorNoRecursively(BinaryTreeNode *pNode)
{
	if(NULL==pNode)
		return;

	stack<BinaryTreeNode *> stackTreeNode;
	stackTreeNode.push(pNode);
	while(stackTreeNode.size())
	{
		BinaryTreeNode *pNode=stackTreeNode.top();
		stackTreeNode.pop();

		if(NULL!=pNode->m_pLeft||NULL!=pNode->m_pRight)
		{
			BinaryTreeNode *pTemp=pNode->m_pLeft;
			pNode->m_pLeft=pNode->m_pRight;
			pNode->m_pRight=pTemp;
		}
		if(NULL!=pNode->m_pLeft)
			stackTreeNode.push(pNode->m_pLeft);
		if(NULL!=pNode->m_pRight)
			stackTreeNode.push(pNode->m_pRight);
	}


}
